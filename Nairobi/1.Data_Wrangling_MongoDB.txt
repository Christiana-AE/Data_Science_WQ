Wrangling Data sourced from Databases - MongoDB

Connect to MongoDb server
Explore the database and locate the PM2.5 air quality reading
Import data into a DataFrame and build a model

Highlights
- Prepare Data (Connect, Explore, Import)
Connect: Connect to MongoDB
Explore: What is data model for MongoDB? What is semi structured data? How do you query database using pymongo?
Import: Import query results into a DataFrame


Libraries used 
prettyprinter: makes formatting easier to read from database
pymongo: used to get data from mongodb server

Data from MongoDB is given in dictionaries, pretty printer helps to ensure the layout is easier


Libraries 
from pprint import PrettyPrinter
import pandas as pd
from IPython.display import VimeoVideo
from pymongo import MongoClient

------------------------------------------------------------------------------
PREPARE DATA - Connect

Data from MongoDB is given in dictionaries, pretty printer helps to ensure the layout is easier

Task:  Instantiate a PrettyPrinter, and assign it to the variable pp.
pp = PrettyPrinter(indent = 2)


Task: Create a client that connects to the database running at localhost on port 27017
client = MongoClient(host = "localhost", port=27017)


------------------------------------------------------------------------------
PREPARE DATA - Explore

Iterator: An iterator is a function that allows Python deliver a stream of data. it allows python to save on memory space
It is important for MongoDB because we want to save on memory usage

Task: Print a list of the databases available on client.

pp.pprint(list(client.list_databases()))
We wrapped it in list as without the list function, the output produced was the memory location


------------------------------------------------------------------------------

Task: Assign the "air-quality" database to the variable db.

db = client["air-quality"]

------------------------------------------------------------------------------

Task: Use the list_collections method to print a list of the collections available in db.

for c in db.list_collections():
    print(c["name"])

------------------------------------------------------------------------------
Task: Assign the "nairobi" collection in db to the variable name nairobi

nairobi = db["nairobi"]

------------------------------------------------------------------------------
Task: Use the count_documents method to see how many documents are in the nairobi collection.

nairobi.count_documents({})

------------------------------------------------------------------------------
Task: Use the find_one method to retrieve one document from the nairobi collection, and assign it to the variable name result

result = nairobi.find_one({})
pp.pprint(result)

------------------------------------------------------------------------------
